@mixin size($width, $height: $width) {
	width: $width;
	height: $height;
}
@mixin absoluteCenter($direction: "left", $position: absolute) {
	position: $position;
	@if $direction == "left" {
		left: 50%;
		transform: translateX(-50%);
	}
	@if $direction == "top" {
		top: 50%;
		transform: translateY(-50%);
	}
	@if $direction == "both" {
		top: 50%;
		left: 50%;
		transform: translate(-50%, -50%);
	}
}
@mixin absoluteFull() {
	position: absolute;
	top: 0;
	left: 0;
	width: 100%;
	height: 100%;
}
// BackgroundColor
@mixin bg($color: #ccc) {
	background-color: $color;
}
// Flexbox
@mixin flexbox($align: stretch, $justify: flex-start, $direction: row, $wrap: nowrap) {
	display: flex;
	align-items: $align;
	justify-content: $justify;
	flex-direction: $direction;
	flex-wrap: $wrap;
}
// Hide Scrollbar
@mixin hideScroll() {
	-ms-overflow-style: none;
	scrollbar-width: none;
	&::-webkit-scrollbar {
		display: none;
	}
}
// Style Scrollbar
@mixin styleScrollbar(
	$width: 0.5rem,
	$track-color: $gray-light-color,
	$border-radius: 2rem,
	$thumb-color: $third-color
) {
	&::-webkit-scrollbar {
		width: $width;
	}
	&::-webkit-scrollbar-track {
		background-color: $track-color;
		border-radius: $border-radius;
	}
	&::-webkit-scrollbar-thumb {
		background-color: $thumb-color;
		border-radius: $border-radius;
	}
}
@mixin textClamp($rows: 1, $size: 100%) {
	display: -webkit-box;
	-webkit-line-clamp: $rows;
	-webkit-box-orient: vertical;
	overflow: hidden;
	text-overflow: ellipsis;
	width: $size;
	max-width: $size;
	white-space: pre-wrap;
	word-break: break-word;
}
@mixin box-shadow($top, $left, $blur, $color, $inset: false) {
	@if $inset {
		box-shadow: inset $top $left $blur $color;
	} @else {
		box-shadow: $top $left $blur $color;
	}
}
@mixin maxWidth($breakpoint) {
	@media screen and (max-width: $breakpoint) {
		@content;
	}
}
@mixin minWidth($breakpoint) {
	@media screen and (min-width: $breakpoint) {
		@content;
	}
}
// Hover
@mixin hoverEffect($itemClass, $overlayClass, $transform: "true") {
	#{$itemClass} {
		position: relative;
		z-index: 1;
		transition: all 0.25s linear;
		will-change: transform;
		#{$overlayClass} {
			@include absoluteFull();
			opacity: 0;
			visibility: hidden;
			transition: all 0.25s linear;
			background: linear-gradient(to bottom, rgba($primary-color, 0.8), rgba($secondary-color, 0.8));
			z-index: 2;
			@include flexbox(center, center, column);
		}
		@if $transform == "true" {
			&::after {
				content: "";
				@include absoluteFull();
				@include bg($third-color);
				transition: all 0.25s linear;
				will-change: transform;
				z-index: -1;
			}
		}
		&:hover {
			#{$overlayClass} {
				opacity: 1;
				visibility: visible;
			}
			@if $transform == "true" {
				transform: translate(-1rem, -1rem);
				&::after {
					transform: translate(1rem, 1rem);
				}
			}
		}
	}
}
@mixin touchSlider($width: 80%, $gap: 2rem, $padding: 1rem) {
	display: grid;
	grid-auto-columns: $width;
	grid-auto-flow: column;
	grid-template-columns: unset;
	gap: 2rem;
	overflow-x: auto;
	padding: 1rem;
	// Scroll snap cho phần tử cha
	scroll-snap-type: x mandatory;
	scroll-snap-stop: always;
	// Ẩn thanh scroll
	@include hideScroll();
	& > * {
		// Scroll snap cho phần tử con
		scroll-snap-align: center;
		width: auto;
	}
}

// Flexbox2 sử dụng Object
@mixin flexbox2($config: ()) {
	// $align: stretch, $justify: flex-start, $direction: row, $wrap: nowrap
	$config: extend(
		(
			display: flex,
			alignItems: stretch,
			justifyContent: flex-start,
			flexDirection: row,
			flexWrap: nowrap,
		),
		$config
	);
	display: map-get($config, display);
	align-items: map-get($config, alignItems);
	justify-content: map-get($config, justifyContent);
	flex-direction: map-get($config, flexDirection);
	flex-wrap: map-get($config, flexWrap);
}
